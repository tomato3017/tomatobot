// Code generated by mockery v2.43.2. DO NOT EDIT.

package notifications

import (
	mock "github.com/stretchr/testify/mock"
	db "github.com/tomato3017/tomatobot/pkg/bot/models/db"

	uuid "github.com/google/uuid"
)

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

type MockPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisher) EXPECT() *MockPublisher_Expecter {
	return &MockPublisher_Expecter{mock: &_m.Mock}
}

// GetSubscriptions provides a mock function with given fields: chatId
func (_m *MockPublisher) GetSubscriptions(chatId int64) ([]db.Subscriptions, error) {
	ret := _m.Called(chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptions")
	}

	var r0 []db.Subscriptions
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]db.Subscriptions, error)); ok {
		return rf(chatId)
	}
	if rf, ok := ret.Get(0).(func(int64) []db.Subscriptions); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Subscriptions)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPublisher_GetSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptions'
type MockPublisher_GetSubscriptions_Call struct {
	*mock.Call
}

// GetSubscriptions is a helper method to define mock.On call
//   - chatId int64
func (_e *MockPublisher_Expecter) GetSubscriptions(chatId interface{}) *MockPublisher_GetSubscriptions_Call {
	return &MockPublisher_GetSubscriptions_Call{Call: _e.mock.On("GetSubscriptions", chatId)}
}

func (_c *MockPublisher_GetSubscriptions_Call) Run(run func(chatId int64)) *MockPublisher_GetSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockPublisher_GetSubscriptions_Call) Return(_a0 []db.Subscriptions, _a1 error) *MockPublisher_GetSubscriptions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPublisher_GetSubscriptions_Call) RunAndReturn(run func(int64) ([]db.Subscriptions, error)) *MockPublisher_GetSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: msg
func (_m *MockPublisher) Publish(msg Message) {
	_m.Called(msg)
}

// MockPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - msg Message
func (_e *MockPublisher_Expecter) Publish(msg interface{}) *MockPublisher_Publish_Call {
	return &MockPublisher_Publish_Call{Call: _e.mock.On("Publish", msg)}
}

func (_c *MockPublisher_Publish_Call) Run(run func(msg Message)) *MockPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Message))
	})
	return _c
}

func (_c *MockPublisher_Publish_Call) Return() *MockPublisher_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_Publish_Call) RunAndReturn(run func(Message)) *MockPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: sub
func (_m *MockPublisher) Subscribe(sub Subscriber) (string, error) {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(Subscriber) (string, error)); ok {
		return rf(sub)
	}
	if rf, ok := ret.Get(0).(func(Subscriber) string); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(Subscriber) error); ok {
		r1 = rf(sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPublisher_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockPublisher_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - sub Subscriber
func (_e *MockPublisher_Expecter) Subscribe(sub interface{}) *MockPublisher_Subscribe_Call {
	return &MockPublisher_Subscribe_Call{Call: _e.mock.On("Subscribe", sub)}
}

func (_c *MockPublisher_Subscribe_Call) Run(run func(sub Subscriber)) *MockPublisher_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Subscriber))
	})
	return _c
}

func (_c *MockPublisher_Subscribe_Call) Return(_a0 string, _a1 error) *MockPublisher_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPublisher_Subscribe_Call) RunAndReturn(run func(Subscriber) (string, error)) *MockPublisher_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: topicId, chatId
func (_m *MockPublisher) Unsubscribe(topicId uuid.UUID, chatId int64) error {
	ret := _m.Called(topicId, chatId)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, int64) error); ok {
		r0 = rf(topicId, chatId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPublisher_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockPublisher_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - topicId uuid.UUID
//   - chatId int64
func (_e *MockPublisher_Expecter) Unsubscribe(topicId interface{}, chatId interface{}) *MockPublisher_Unsubscribe_Call {
	return &MockPublisher_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", topicId, chatId)}
}

func (_c *MockPublisher_Unsubscribe_Call) Run(run func(topicId uuid.UUID, chatId int64)) *MockPublisher_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(int64))
	})
	return _c
}

func (_c *MockPublisher_Unsubscribe_Call) Return(_a0 error) *MockPublisher_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_Unsubscribe_Call) RunAndReturn(run func(uuid.UUID, int64) error) *MockPublisher_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// UnsubscribeAll provides a mock function with given fields: chatId
func (_m *MockPublisher) UnsubscribeAll(chatId int64) error {
	ret := _m.Called(chatId)

	if len(ret) == 0 {
		panic("no return value specified for UnsubscribeAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(chatId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPublisher_UnsubscribeAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsubscribeAll'
type MockPublisher_UnsubscribeAll_Call struct {
	*mock.Call
}

// UnsubscribeAll is a helper method to define mock.On call
//   - chatId int64
func (_e *MockPublisher_Expecter) UnsubscribeAll(chatId interface{}) *MockPublisher_UnsubscribeAll_Call {
	return &MockPublisher_UnsubscribeAll_Call{Call: _e.mock.On("UnsubscribeAll", chatId)}
}

func (_c *MockPublisher_UnsubscribeAll_Call) Run(run func(chatId int64)) *MockPublisher_UnsubscribeAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockPublisher_UnsubscribeAll_Call) Return(_a0 error) *MockPublisher_UnsubscribeAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_UnsubscribeAll_Call) RunAndReturn(run func(int64) error) *MockPublisher_UnsubscribeAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
