// Code generated by mockery v2.43.2. DO NOT EDIT.

package notifications

import mock "github.com/stretchr/testify/mock"

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

type MockPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisher) EXPECT() *MockPublisher_Expecter {
	return &MockPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: msg
func (_m *MockPublisher) Publish(msg Message) {
	_m.Called(msg)
}

// MockPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - msg Message
func (_e *MockPublisher_Expecter) Publish(msg interface{}) *MockPublisher_Publish_Call {
	return &MockPublisher_Publish_Call{Call: _e.mock.On("Publish", msg)}
}

func (_c *MockPublisher_Publish_Call) Run(run func(msg Message)) *MockPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Message))
	})
	return _c
}

func (_c *MockPublisher_Publish_Call) Return() *MockPublisher_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPublisher_Publish_Call) RunAndReturn(run func(Message)) *MockPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: sub
func (_m *MockPublisher) Subscribe(sub Subscriber) error {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Subscriber) error); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPublisher_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockPublisher_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - sub Subscriber
func (_e *MockPublisher_Expecter) Subscribe(sub interface{}) *MockPublisher_Subscribe_Call {
	return &MockPublisher_Subscribe_Call{Call: _e.mock.On("Subscribe", sub)}
}

func (_c *MockPublisher_Subscribe_Call) Run(run func(sub Subscriber)) *MockPublisher_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Subscriber))
	})
	return _c
}

func (_c *MockPublisher_Subscribe_Call) Return(_a0 error) *MockPublisher_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_Subscribe_Call) RunAndReturn(run func(Subscriber) error) *MockPublisher_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: sub
func (_m *MockPublisher) Unsubscribe(sub Subscriber) error {
	ret := _m.Called(sub)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Subscriber) error); ok {
		r0 = rf(sub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPublisher_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockPublisher_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - sub Subscriber
func (_e *MockPublisher_Expecter) Unsubscribe(sub interface{}) *MockPublisher_Unsubscribe_Call {
	return &MockPublisher_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", sub)}
}

func (_c *MockPublisher_Unsubscribe_Call) Run(run func(sub Subscriber)) *MockPublisher_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Subscriber))
	})
	return _c
}

func (_c *MockPublisher_Unsubscribe_Call) Return(_a0 error) *MockPublisher_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_Unsubscribe_Call) RunAndReturn(run func(Subscriber) error) *MockPublisher_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
