// Code generated by mockery v2.43.2. DO NOT EDIT.

package command

import mock "github.com/stretchr/testify/mock"

// MockICommandParams is an autogenerated mock type for the ICommandParams type
type MockICommandParams struct {
	mock.Mock
}

type MockICommandParams_Expecter struct {
	mock *mock.Mock
}

func (_m *MockICommandParams) EXPECT() *MockICommandParams_Expecter {
	return &MockICommandParams_Expecter{mock: &_m.Mock}
}

// Args provides a mock function with given fields:
func (_m *MockICommandParams) Args() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Args")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockICommandParams_Args_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Args'
type MockICommandParams_Args_Call struct {
	*mock.Call
}

// Args is a helper method to define mock.On call
func (_e *MockICommandParams_Expecter) Args() *MockICommandParams_Args_Call {
	return &MockICommandParams_Args_Call{Call: _e.mock.On("Args")}
}

func (_c *MockICommandParams_Args_Call) Run(run func()) *MockICommandParams_Args_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockICommandParams_Args_Call) Return(_a0 []string) *MockICommandParams_Args_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommandParams_Args_Call) RunAndReturn(run func() []string) *MockICommandParams_Args_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockICommandParams) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockICommandParams_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockICommandParams_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockICommandParams_Expecter) Name() *MockICommandParams_Name_Call {
	return &MockICommandParams_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockICommandParams_Name_Call) Run(run func()) *MockICommandParams_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockICommandParams_Name_Call) Return(_a0 string) *MockICommandParams_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommandParams_Name_Call) RunAndReturn(run func() string) *MockICommandParams_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockICommandParams creates a new instance of MockICommandParams. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICommandParams(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICommandParams {
	mock := &MockICommandParams{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
