// Code generated by mockery v2.43.2. DO NOT EDIT.

package command

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	middleware "github.com/tomato3017/tomatobot/pkg/command/middleware"

	models "github.com/tomato3017/tomatobot/pkg/command/models"
)

// MockBaseICommand is an autogenerated mock type for the BaseICommand type
type MockBaseICommand struct {
	mock.Mock
}

type MockBaseICommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBaseICommand) EXPECT() *MockBaseICommand_Expecter {
	return &MockBaseICommand_Expecter{mock: &_m.Mock}
}

// CmdName provides a mock function with given fields:
func (_m *MockBaseICommand) CmdName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CmdName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBaseICommand_CmdName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CmdName'
type MockBaseICommand_CmdName_Call struct {
	*mock.Call
}

// CmdName is a helper method to define mock.On call
func (_e *MockBaseICommand_Expecter) CmdName() *MockBaseICommand_CmdName_Call {
	return &MockBaseICommand_CmdName_Call{Call: _e.mock.On("CmdName")}
}

func (_c *MockBaseICommand_CmdName_Call) Run(run func()) *MockBaseICommand_CmdName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBaseICommand_CmdName_Call) Return(_a0 string) *MockBaseICommand_CmdName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseICommand_CmdName_Call) RunAndReturn(run func() string) *MockBaseICommand_CmdName_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, params
func (_m *MockBaseICommand) Execute(ctx context.Context, params models.CommandParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CommandParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBaseICommand_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockBaseICommand_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.CommandParams
func (_e *MockBaseICommand_Expecter) Execute(ctx interface{}, params interface{}) *MockBaseICommand_Execute_Call {
	return &MockBaseICommand_Execute_Call{Call: _e.mock.On("Execute", ctx, params)}
}

func (_c *MockBaseICommand_Execute_Call) Run(run func(ctx context.Context, params models.CommandParams)) *MockBaseICommand_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CommandParams))
	})
	return _c
}

func (_c *MockBaseICommand_Execute_Call) Return(_a0 error) *MockBaseICommand_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseICommand_Execute_Call) RunAndReturn(run func(context.Context, models.CommandParams) error) *MockBaseICommand_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSubcommand provides a mock function with given fields: cmdname, cmd, middlewareFuncs
func (_m *MockBaseICommand) RegisterSubcommand(cmdname string, cmd TomatobotCommand, middlewareFuncs ...middleware.MiddlewareFunc) error {
	_va := make([]interface{}, len(middlewareFuncs))
	for _i := range middlewareFuncs {
		_va[_i] = middlewareFuncs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cmdname, cmd)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSubcommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, TomatobotCommand, ...middleware.MiddlewareFunc) error); ok {
		r0 = rf(cmdname, cmd, middlewareFuncs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBaseICommand_RegisterSubcommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSubcommand'
type MockBaseICommand_RegisterSubcommand_Call struct {
	*mock.Call
}

// RegisterSubcommand is a helper method to define mock.On call
//   - cmdname string
//   - cmd TomatobotCommand
//   - middlewareFuncs ...middleware.MiddlewareFunc
func (_e *MockBaseICommand_Expecter) RegisterSubcommand(cmdname interface{}, cmd interface{}, middlewareFuncs ...interface{}) *MockBaseICommand_RegisterSubcommand_Call {
	return &MockBaseICommand_RegisterSubcommand_Call{Call: _e.mock.On("RegisterSubcommand",
		append([]interface{}{cmdname, cmd}, middlewareFuncs...)...)}
}

func (_c *MockBaseICommand_RegisterSubcommand_Call) Run(run func(cmdname string, cmd TomatobotCommand, middlewareFuncs ...middleware.MiddlewareFunc)) *MockBaseICommand_RegisterSubcommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]middleware.MiddlewareFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(middleware.MiddlewareFunc)
			}
		}
		run(args[0].(string), args[1].(TomatobotCommand), variadicArgs...)
	})
	return _c
}

func (_c *MockBaseICommand_RegisterSubcommand_Call) Return(_a0 error) *MockBaseICommand_RegisterSubcommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseICommand_RegisterSubcommand_Call) RunAndReturn(run func(string, TomatobotCommand, ...middleware.MiddlewareFunc) error) *MockBaseICommand_RegisterSubcommand_Call {
	_c.Call.Return(run)
	return _c
}

// RunMiddleware provides a mock function with given fields: ctx, params
func (_m *MockBaseICommand) RunMiddleware(ctx context.Context, params models.CommandParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RunMiddleware")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.CommandParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBaseICommand_RunMiddleware_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunMiddleware'
type MockBaseICommand_RunMiddleware_Call struct {
	*mock.Call
}

// RunMiddleware is a helper method to define mock.On call
//   - ctx context.Context
//   - params models.CommandParams
func (_e *MockBaseICommand_Expecter) RunMiddleware(ctx interface{}, params interface{}) *MockBaseICommand_RunMiddleware_Call {
	return &MockBaseICommand_RunMiddleware_Call{Call: _e.mock.On("RunMiddleware", ctx, params)}
}

func (_c *MockBaseICommand_RunMiddleware_Call) Run(run func(ctx context.Context, params models.CommandParams)) *MockBaseICommand_RunMiddleware_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.CommandParams))
	})
	return _c
}

func (_c *MockBaseICommand_RunMiddleware_Call) Return(_a0 error) *MockBaseICommand_RunMiddleware_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseICommand_RunMiddleware_Call) RunAndReturn(run func(context.Context, models.CommandParams) error) *MockBaseICommand_RunMiddleware_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBaseICommand creates a new instance of MockBaseICommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBaseICommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBaseICommand {
	mock := &MockBaseICommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
