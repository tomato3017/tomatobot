// Code generated by mockery v2.43.2. DO NOT EDIT.

package models

import (
	context "context"

	command "github.com/tomato3017/tomatobot/pkg/command"

	mock "github.com/stretchr/testify/mock"

	tgapi "github.com/tomato3017/tomatobot/pkg/bot/models/tgapi"
)

// MockTomatobotInstance is an autogenerated mock type for the TomatobotInstance type
type MockTomatobotInstance struct {
	mock.Mock
}

type MockTomatobotInstance_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTomatobotInstance) EXPECT() *MockTomatobotInstance_Expecter {
	return &MockTomatobotInstance_Expecter{mock: &_m.Mock}
}

// RegisterChatCallback provides a mock function with given fields: name, handler
func (_m *MockTomatobotInstance) RegisterChatCallback(name string, handler func(context.Context, tgapi.TGBotMsg)) error {
	ret := _m.Called(name, handler)

	if len(ret) == 0 {
		panic("no return value specified for RegisterChatCallback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(context.Context, tgapi.TGBotMsg)) error); ok {
		r0 = rf(name, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTomatobotInstance_RegisterChatCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterChatCallback'
type MockTomatobotInstance_RegisterChatCallback_Call struct {
	*mock.Call
}

// RegisterChatCallback is a helper method to define mock.On call
//   - name string
//   - handler func(context.Context , tgapi.TGBotMsg)
func (_e *MockTomatobotInstance_Expecter) RegisterChatCallback(name interface{}, handler interface{}) *MockTomatobotInstance_RegisterChatCallback_Call {
	return &MockTomatobotInstance_RegisterChatCallback_Call{Call: _e.mock.On("RegisterChatCallback", name, handler)}
}

func (_c *MockTomatobotInstance_RegisterChatCallback_Call) Run(run func(name string, handler func(context.Context, tgapi.TGBotMsg))) *MockTomatobotInstance_RegisterChatCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func(context.Context, tgapi.TGBotMsg)))
	})
	return _c
}

func (_c *MockTomatobotInstance_RegisterChatCallback_Call) Return(_a0 error) *MockTomatobotInstance_RegisterChatCallback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTomatobotInstance_RegisterChatCallback_Call) RunAndReturn(run func(string, func(context.Context, tgapi.TGBotMsg)) error) *MockTomatobotInstance_RegisterChatCallback_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCommand provides a mock function with given fields: name, _a1
func (_m *MockTomatobotInstance) RegisterCommand(name string, _a1 command.TomatobotCommand) error {
	ret := _m.Called(name, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, command.TomatobotCommand) error); ok {
		r0 = rf(name, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTomatobotInstance_RegisterCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCommand'
type MockTomatobotInstance_RegisterCommand_Call struct {
	*mock.Call
}

// RegisterCommand is a helper method to define mock.On call
//   - name string
//   - _a1 command.TomatobotCommand
func (_e *MockTomatobotInstance_Expecter) RegisterCommand(name interface{}, _a1 interface{}) *MockTomatobotInstance_RegisterCommand_Call {
	return &MockTomatobotInstance_RegisterCommand_Call{Call: _e.mock.On("RegisterCommand", name, _a1)}
}

func (_c *MockTomatobotInstance_RegisterCommand_Call) Run(run func(name string, _a1 command.TomatobotCommand)) *MockTomatobotInstance_RegisterCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(command.TomatobotCommand))
	})
	return _c
}

func (_c *MockTomatobotInstance_RegisterCommand_Call) Return(_a0 error) *MockTomatobotInstance_RegisterCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTomatobotInstance_RegisterCommand_Call) RunAndReturn(run func(string, command.TomatobotCommand) error) *MockTomatobotInstance_RegisterCommand_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSimpleCommand provides a mock function with given fields: name, desc, help, callback
func (_m *MockTomatobotInstance) RegisterSimpleCommand(name string, desc string, help string, callback command.CommandCallback) error {
	ret := _m.Called(name, desc, help, callback)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSimpleCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, command.CommandCallback) error); ok {
		r0 = rf(name, desc, help, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTomatobotInstance_RegisterSimpleCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSimpleCommand'
type MockTomatobotInstance_RegisterSimpleCommand_Call struct {
	*mock.Call
}

// RegisterSimpleCommand is a helper method to define mock.On call
//   - name string
//   - desc string
//   - help string
//   - callback command.CommandCallback
func (_e *MockTomatobotInstance_Expecter) RegisterSimpleCommand(name interface{}, desc interface{}, help interface{}, callback interface{}) *MockTomatobotInstance_RegisterSimpleCommand_Call {
	return &MockTomatobotInstance_RegisterSimpleCommand_Call{Call: _e.mock.On("RegisterSimpleCommand", name, desc, help, callback)}
}

func (_c *MockTomatobotInstance_RegisterSimpleCommand_Call) Run(run func(name string, desc string, help string, callback command.CommandCallback)) *MockTomatobotInstance_RegisterSimpleCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(command.CommandCallback))
	})
	return _c
}

func (_c *MockTomatobotInstance_RegisterSimpleCommand_Call) Return(_a0 error) *MockTomatobotInstance_RegisterSimpleCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTomatobotInstance_RegisterSimpleCommand_Call) RunAndReturn(run func(string, string, string, command.CommandCallback) error) *MockTomatobotInstance_RegisterSimpleCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTomatobotInstance creates a new instance of MockTomatobotInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTomatobotInstance(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTomatobotInstance {
	mock := &MockTomatobotInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
