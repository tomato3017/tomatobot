// Code generated by mockery v2.43.2. DO NOT EDIT.

package proxy

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockTGBotImplementation is an autogenerated mock type for the TGBotImplementation type
type MockTGBotImplementation struct {
	mock.Mock
}

type MockTGBotImplementation_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTGBotImplementation) EXPECT() *MockTGBotImplementation_Expecter {
	return &MockTGBotImplementation_Expecter{mock: &_m.Mock}
}

// IdIsChat provides a mock function with given fields: chatID
func (_m *MockTGBotImplementation) IdIsChat(chatID int64) bool {
	ret := _m.Called(chatID)

	if len(ret) == 0 {
		panic("no return value specified for IdIsChat")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTGBotImplementation_IdIsChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdIsChat'
type MockTGBotImplementation_IdIsChat_Call struct {
	*mock.Call
}

// IdIsChat is a helper method to define mock.On call
//   - chatID int64
func (_e *MockTGBotImplementation_Expecter) IdIsChat(chatID interface{}) *MockTGBotImplementation_IdIsChat_Call {
	return &MockTGBotImplementation_IdIsChat_Call{Call: _e.mock.On("IdIsChat", chatID)}
}

func (_c *MockTGBotImplementation_IdIsChat_Call) Run(run func(chatID int64)) *MockTGBotImplementation_IdIsChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockTGBotImplementation_IdIsChat_Call) Return(_a0 bool) *MockTGBotImplementation_IdIsChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTGBotImplementation_IdIsChat_Call) RunAndReturn(run func(int64) bool) *MockTGBotImplementation_IdIsChat_Call {
	_c.Call.Return(run)
	return _c
}

// InnerBotAPI provides a mock function with given fields:
func (_m *MockTGBotImplementation) InnerBotAPI() *tgbotapi.BotAPI {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InnerBotAPI")
	}

	var r0 *tgbotapi.BotAPI
	if rf, ok := ret.Get(0).(func() *tgbotapi.BotAPI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tgbotapi.BotAPI)
		}
	}

	return r0
}

// MockTGBotImplementation_InnerBotAPI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InnerBotAPI'
type MockTGBotImplementation_InnerBotAPI_Call struct {
	*mock.Call
}

// InnerBotAPI is a helper method to define mock.On call
func (_e *MockTGBotImplementation_Expecter) InnerBotAPI() *MockTGBotImplementation_InnerBotAPI_Call {
	return &MockTGBotImplementation_InnerBotAPI_Call{Call: _e.mock.On("InnerBotAPI")}
}

func (_c *MockTGBotImplementation_InnerBotAPI_Call) Run(run func()) *MockTGBotImplementation_InnerBotAPI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTGBotImplementation_InnerBotAPI_Call) Return(_a0 *tgbotapi.BotAPI) *MockTGBotImplementation_InnerBotAPI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTGBotImplementation_InnerBotAPI_Call) RunAndReturn(run func() *tgbotapi.BotAPI) *MockTGBotImplementation_InnerBotAPI_Call {
	_c.Call.Return(run)
	return _c
}

// IsBotAdmin provides a mock function with given fields: userId
func (_m *MockTGBotImplementation) IsBotAdmin(userId int64) bool {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for IsBotAdmin")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockTGBotImplementation_IsBotAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBotAdmin'
type MockTGBotImplementation_IsBotAdmin_Call struct {
	*mock.Call
}

// IsBotAdmin is a helper method to define mock.On call
//   - userId int64
func (_e *MockTGBotImplementation_Expecter) IsBotAdmin(userId interface{}) *MockTGBotImplementation_IsBotAdmin_Call {
	return &MockTGBotImplementation_IsBotAdmin_Call{Call: _e.mock.On("IsBotAdmin", userId)}
}

func (_c *MockTGBotImplementation_IsBotAdmin_Call) Run(run func(userId int64)) *MockTGBotImplementation_IsBotAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockTGBotImplementation_IsBotAdmin_Call) Return(_a0 bool) *MockTGBotImplementation_IsBotAdmin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTGBotImplementation_IsBotAdmin_Call) RunAndReturn(run func(int64) bool) *MockTGBotImplementation_IsBotAdmin_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: c
func (_m *MockTGBotImplementation) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 tgbotapi.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) (tgbotapi.Message, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) tgbotapi.Message); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTGBotImplementation_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockTGBotImplementation_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - c tgbotapi.Chattable
func (_e *MockTGBotImplementation_Expecter) Send(c interface{}) *MockTGBotImplementation_Send_Call {
	return &MockTGBotImplementation_Send_Call{Call: _e.mock.On("Send", c)}
}

func (_c *MockTGBotImplementation_Send_Call) Run(run func(c tgbotapi.Chattable)) *MockTGBotImplementation_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tgbotapi.Chattable))
	})
	return _c
}

func (_c *MockTGBotImplementation_Send_Call) Return(_a0 tgbotapi.Message, _a1 error) *MockTGBotImplementation_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTGBotImplementation_Send_Call) RunAndReturn(run func(tgbotapi.Chattable) (tgbotapi.Message, error)) *MockTGBotImplementation_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendPrivate provides a mock function with given fields: c
func (_m *MockTGBotImplementation) SendPrivate(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for SendPrivate")
	}

	var r0 tgbotapi.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) (tgbotapi.Message, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) tgbotapi.Message); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTGBotImplementation_SendPrivate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPrivate'
type MockTGBotImplementation_SendPrivate_Call struct {
	*mock.Call
}

// SendPrivate is a helper method to define mock.On call
//   - c tgbotapi.Chattable
func (_e *MockTGBotImplementation_Expecter) SendPrivate(c interface{}) *MockTGBotImplementation_SendPrivate_Call {
	return &MockTGBotImplementation_SendPrivate_Call{Call: _e.mock.On("SendPrivate", c)}
}

func (_c *MockTGBotImplementation_SendPrivate_Call) Run(run func(c tgbotapi.Chattable)) *MockTGBotImplementation_SendPrivate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tgbotapi.Chattable))
	})
	return _c
}

func (_c *MockTGBotImplementation_SendPrivate_Call) Return(_a0 tgbotapi.Message, _a1 error) *MockTGBotImplementation_SendPrivate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTGBotImplementation_SendPrivate_Call) RunAndReturn(run func(tgbotapi.Chattable) (tgbotapi.Message, error)) *MockTGBotImplementation_SendPrivate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTGBotImplementation creates a new instance of MockTGBotImplementation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTGBotImplementation(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTGBotImplementation {
	mock := &MockTGBotImplementation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
