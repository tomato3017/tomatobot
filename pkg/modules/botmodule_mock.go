// Code generated by mockery v2.43.2. DO NOT EDIT.

package modules

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBotModule is an autogenerated mock type for the BotModule type
type MockBotModule struct {
	mock.Mock
}

type MockBotModule_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBotModule) EXPECT() *MockBotModule_Expecter {
	return &MockBotModule_Expecter{mock: &_m.Mock}
}

// Initialize provides a mock function with given fields: ctx, params
func (_m *MockBotModule) Initialize(ctx context.Context, params InitializeParameters) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, InitializeParameters) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBotModule_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockBotModule_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - ctx context.Context
//   - params InitializeParameters
func (_e *MockBotModule_Expecter) Initialize(ctx interface{}, params interface{}) *MockBotModule_Initialize_Call {
	return &MockBotModule_Initialize_Call{Call: _e.mock.On("Initialize", ctx, params)}
}

func (_c *MockBotModule_Initialize_Call) Run(run func(ctx context.Context, params InitializeParameters)) *MockBotModule_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(InitializeParameters))
	})
	return _c
}

func (_c *MockBotModule_Initialize_Call) Return(_a0 error) *MockBotModule_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBotModule_Initialize_Call) RunAndReturn(run func(context.Context, InitializeParameters) error) *MockBotModule_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockBotModule) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBotModule_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockBotModule_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBotModule_Expecter) Shutdown(ctx interface{}) *MockBotModule_Shutdown_Call {
	return &MockBotModule_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *MockBotModule_Shutdown_Call) Run(run func(ctx context.Context)) *MockBotModule_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBotModule_Shutdown_Call) Return(_a0 error) *MockBotModule_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBotModule_Shutdown_Call) RunAndReturn(run func(context.Context) error) *MockBotModule_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockBotModule) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBotModule_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockBotModule_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBotModule_Expecter) Start(ctx interface{}) *MockBotModule_Start_Call {
	return &MockBotModule_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockBotModule_Start_Call) Run(run func(ctx context.Context)) *MockBotModule_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBotModule_Start_Call) Return(_a0 error) *MockBotModule_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBotModule_Start_Call) RunAndReturn(run func(context.Context) error) *MockBotModule_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBotModule creates a new instance of MockBotModule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBotModule(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBotModule {
	mock := &MockBotModule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
